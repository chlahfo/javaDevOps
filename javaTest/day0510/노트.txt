제어문 : 프로그램 수행중에 사용자의 상황에 따라 흐름을 제어하는 명령어(문장)을 말한다.

- 선택문	: 상황에 따라 동작시켜야 할 명령어(들) 선택 시키기 위한 문장이다.
	if		<--- 
	switch

- 반복문 : 조건을 만족할 동안에 특정 명령어(들)을 계속하여 반복시키기 위한 문장을 말한다.
	for(항1;항2;항3	){반복시킬 명령어(들)};
	--> 만족하는 조건을 항1, 2, 3에 써줌
	--> 항 1은 변수 지정과 출발 값을 항 1에 적어줌. 
	--> 항 2는 조건식
	--> 항 3은 증감식
	--> for 반복문 안에서 카운트 하는 변수를 for 를 끝난 다름에도 끝난 다음에 판별해야할 때는 빢에서 선언. 카운트 할떄만 필요하면 for 항 1에서 선언하고 사용할 수 있다.
	while
	do~while
--> for 문을 사용하는 형식 
	"김밥"


- 기타	: 제어문에서 사용하는 키워드
	break
	continue
	
----------------------------------------------------------------------

if( n == 0) {
	System.out.println("영");
}else if(n == 1){
	System.out.println("일");
}else if(n == 2){
	System.out.println("이");
}else if(n == 3){
	System.out.println("삼");
}else if(n == 4){
	System.out.println("사");
}else if(n == 5){
	System.out.println("오");
}else if(n == 6){
	System.out.println("육");
}else if(n == 7){
	System.out.println("칠");
}else if(n == 8){
	System.out.println("팔");
}else if(n == 9){
	System.out.println("구");
}else{
	System.out.println("입력범위를 넘었습니다.");
}

위와 같이 판별해야 하는 case가 여러가지 일때에 if ~ else if를 사용할 수 있지만
문장구조가 복잡해 지고 읽기가 쉽지 않아요.
이럴때에 switch case를 사용하면 좀 더 간결하게 표현할 수 있어요.

------------------------------------------------------------

<< switch ~ case 를 사용하는 형식 >>

switch( 항 ){
	case 값1:명령어1;
	case 값2:명령어2;
	case 값3:명령어3;	
	default:명령어n;
}

------------------------------------------------------------
if(항 == 값1){
	명령어1;
}else if(항 == 값2){
	명령어2;
}else if(항 == 값3){
	명령어3;
}else{
	명령어n;
}